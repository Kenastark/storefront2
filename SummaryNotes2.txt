2 - Setting Up the Project
Go to settings.py, go under the DATABASE section and edit your connection string to storefront2 

install our application dependencies
        pipenv install
This will create a new virtual environment and install our application dependencies in that virtual environment

        pipenv shell - Used to activate your virtual environment

Activate our virtual environment
i used `pipenv lock` command to fix the error i got. The solutiom was found on this URL

python manage.py migrate - Used to create database tables

closed all running sessions. Open a new query window and import and run the SQL code to populate your database tables.

python manage.py runserver - Used to start your server

Create a new superuser for the admin panel
        python manage.py createsuperuser
Username: admin
Email: ikennaudeani@gmail.com
Password: abc12345

SETTING UP GIT AND GITHUB

git init - initialize a new Git repository
git branch -m main - Used to rename 'master' to 'main'
git remote add origin https://github.com/Kenastark/storefront2.git - 
Connect the local repository to GitHub 
git push -f origin main - Used to force push and override the remote repo. I did this due to the error i got about divergent branches
git pull origin main - Used to pull changes from a specific remore branch 'main' in the remote repository called 'origin'. I did this because i added a README.md file and committed via the github interface which made remote to be ahead of my local by a single commit.
git push --set-upstream origin main - Used to push local changes to remore and well as sets the remote tracking information to your local branch. After executing this command, your local branch will be linked to the remote main branch

5 - Learning paths
This is the URL to learning paths https://codewithmosh.com/p/learning-paths

6 - Follow Me Around
Twitter: https://twitter.com/moshhamedani

Facebook: https://www.facebook.com/programmingwithmosh

YouTube: https://www.youtube.com/user/programmingwithmosh

LinkedIn: https://www.linkedin.com/in/mosh-hamedani/


BUILDING RESTful APIs WITH DJANGO REST FRAMEWORK

1 - Introduction
In this Section we learn
* Introduction to RESTful APIs 
* Installing Django REST Framework
* Creating API views
* Creating serializers
* Serializing and deserializing models 


2 - What are RESTful APIs

Building an API is simply building an interface that client apps can use to get or save data.

An API is going to have a bunch of endpoints (/products, /carts, /orders) for different purposes. Client apps send requests to these endpoints

Representational State Transfer (REST) - It defines a bunch for rules for clients and servers to communicate over the web. Following these rules help build systems that are:
1. Fast
2. Scalable
3. Reliable
4. Easy to understand
5. Easy to change

An API that conforms to the following rules are RESTful:
1. Resources
2. Representations 
3. HTTP Methods


3 - Resources

A resource is like an object (Product, Collection, Cart) in our application. They are available on the web and client applications can access them using a URL (Uniform Resource Locator)

URL is a way to locate a Resource on the Web, it is a web address


4 - Resource Representations

We can identify a Resource using its URL. When we go to that URL, the server will return the Resource in a certain format or Representation such as HTML, XML, JSON none of which are the internal representation of a Resource on a server.

On the Server, we identify a Resource using an Object or an instance of a python class. We return this object as either HTML, XML, JSON.  

JSON - It is a notation for representating objects in JavaScript
{
    "name": "Kena",
    "age": 24,
    "is_online": True,
    "employer": {},
    "interests": []
}

5 - HTTP METHODS

When building a REST API, you expose one or more endpoints for clients.

Using HTTP Methods, the clients can tell the server what it wants to do with the resources
GET - Getting a resource or collection of resource
POST - for creating a resource POST /products
PUT - Updating a resource
PATCH - Updating part of it PATCH /products/1
DELETE - Deleting a resource DELETE /products/1

6 - Installing Django REST Framework

It is a separate framework that sits on top on Django and makes it easy to build RESTful APIs

`pipenv install djangorestframework`- To install the REST framework

Then add it to the list of INSTALLED_APPS

7 - Creating API views
A view function is a function that takes a request and returns a response. The frontend App is where i practice the concepts.  

i. You first create your views
ii. Then you map your views to the App urls.py file
iii. Then you add your base/main urls.py file that will direct the system to your projects url if it begins with a certain path


In Django, we have two classes
1. HttpResquest
2. HttpResponse

Django Rest Framework also comes with its own:
i. request class
ii. response class

They are simplier and more powerful than the one that comes with django.

Applying an `@api_view()` decorator to our view function, the request object will be an instance of the request class that comes with rest framework. It will replace the request object in django with the obbject that comes with the rest_framework.

Browserable API makes it easy to test our API endpoints in the browser. We only see the browser API page when we hit our endpoints.

Client apps like mobile apps hits our endpoints, it will not see our Browserable API but it will see the data in the response.

ITEMS ON BROWSERABLE API PAGE
Allow - tells us what Http Methods are supported at this endpoint 
                OPTIONS - which we can use to see what operations or what methods are available
                GET - 
Content-Types - tells us the type of content in the response
Vary - Is used for caching

You can apply a Converter to your parameter in the url mapping

8 - Creating Serializers 

JSON Renderer is a class in django rest_framework. It has a method called `render(dict)` that takes a dictionary object and returns a JSON object.

A Serializer is an object that knows how to convert a model instance like a product object to a python dictionary.

https://www.django-rest-framework.org/
https://www.django-rest-framework.org/api-guide/fields/#core-arguments
                Documentation for Serializers


An API should return external representation of an object.

You need an Internal and External representation of an object to avoid exposing sensitive information.

The Serializer objects are completely different from the objects in your model and so the field names do not have to match.

9 - Serializing objects





















































































































































































































































































































































